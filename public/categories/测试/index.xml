<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>测试 on Bruce 2233</title>
        <link>https://bruce2233.github.io/categories/%E6%B5%8B%E8%AF%95/</link>
        <description>Recent content in 测试 on Bruce 2233</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 11 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://bruce2233.github.io/categories/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>计算与存储性能的分析与测试</title>
        <link>https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/</link>
        <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/</guid>
        <description>&lt;img src="https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/CPU%E4%BF%A1%E6%81%AF.png" alt="Featured image of post 计算与存储性能的分析与测试" /&gt;&lt;h1 id=&#34;计算与存储性能的分析与测试&#34;&gt;计算与存储性能的分析与测试&lt;/h1&gt;
&lt;h2 id=&#34;计算-cpu&#34;&gt;计算-CPU&lt;/h2&gt;
&lt;h3 id=&#34;理论分析&#34;&gt;理论分析&lt;/h3&gt;
&lt;h4 id=&#34;评价标准&#34;&gt;评价标准&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;指令执行速度&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;功耗比&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;关键参数&#34;&gt;关键参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;主频&lt;/code&gt;。CPU 的时钟频率，主频越快，速度越快。计算机的操作在时钟信号的控制下分步执行，每个时钟信号周期完成一步操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;睿频&lt;/code&gt;。CPU 可以稳定运行的上限速率，功耗管理智能调整 CPU 频率，使真实频率高于主频。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;缓存&lt;/code&gt;。用于减少处理器访问内存所需平均时间的存储器。可分为一级缓存，二级缓存，三级缓存，缓存的结构和大小对 CPU 速度的影响非常大。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;核心&lt;/code&gt;。“三个臭皮匠顶个诸葛亮”，对于独立的进程，多核心各行其事，但对资源存在竞争的线程，不能发挥 100%的功效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;超线程&lt;/code&gt;。CPU 在执行命令时，往往利用内部一个模块，如计算、访问内存等，超线程技术则利用闲置的 CPU 模块执行命令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;多路&lt;/code&gt;。服务器 CPU 支持在单台机器多个 CPU。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cpu-信息&#34;&gt;CPU 信息&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/CPU%E4%BF%A1%E6%81%AF.png&#34;
	width=&#34;503&#34;
	height=&#34;502&#34;
	srcset=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/CPU%E4%BF%A1%E6%81%AF_hu83ed52c7fd2ea7c705fac7ba79e98bb7_127544_480x0_resize_box_3.png 480w, https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/CPU%E4%BF%A1%E6%81%AF_hu83ed52c7fd2ea7c705fac7ba79e98bb7_127544_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;compiter_info&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;测试实践&#34;&gt;测试实践&lt;/h3&gt;
&lt;h4 id=&#34;测试工具&#34;&gt;测试工具&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CPU-Z 2.0.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows10&lt;/code&gt; 资源管理器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go 1.13&lt;/code&gt; -bench 模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;测试过程&#34;&gt;测试过程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;利用&lt;code&gt;go&lt;/code&gt;的&lt;code&gt;benchmark&lt;/code&gt;模块编写&lt;code&gt;基准测试&lt;/code&gt;程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;BenchmarkCPUHz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;低功耗&lt;/code&gt;条件下测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E4%BD%8E%E5%8A%9F%E8%80%97CPU%E9%A2%91%E7%8E%87.png&#34;
	width=&#34;545&#34;
	height=&#34;129&#34;
	srcset=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E4%BD%8E%E5%8A%9F%E8%80%97CPU%E9%A2%91%E7%8E%87_hud4ca5a366bc5867f76e18bf9fe08bc0a_17869_480x0_resize_box_3.png 480w, https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E4%BD%8E%E5%8A%9F%E8%80%97CPU%E9%A2%91%E7%8E%87_hud4ca5a366bc5867f76e18bf9fe08bc0a_17869_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;低功耗&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;422&#34;
		data-flex-basis=&#34;1013px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算 &lt;img src=&#34;https://latex.codecogs.com/svg.image?%5cinline&amp;amp;space;%5cfrac%7b1%7d%7b0.5350%7d=&amp;amp;space;1.87GHz&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;，实际频率&lt;code&gt;1.87GHz&lt;/code&gt;为&lt;code&gt;CPU低功耗&lt;/code&gt;睿频。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;高功耗&lt;/code&gt;条件下测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E9%AB%98%E5%8A%9F%E8%80%97CPU%E9%A2%91%E7%8E%87.png&#34;
	width=&#34;549&#34;
	height=&#34;127&#34;
	srcset=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E9%AB%98%E5%8A%9F%E8%80%97CPU%E9%A2%91%E7%8E%87_hu04e4c407ee7374ede1336a8414f73bf6_17939_480x0_resize_box_3.png 480w, https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E9%AB%98%E5%8A%9F%E8%80%97CPU%E9%A2%91%E7%8E%87_hu04e4c407ee7374ede1336a8414f73bf6_17939_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;高功耗&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;432&#34;
		data-flex-basis=&#34;1037px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算 &lt;img src=&#34;https://latex.codecogs.com/svg.image?%5cinline&amp;amp;space;%5cfrac%7b1%7d%7b0.2859%7d=&amp;amp;space;3.50GHz&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;，实际频率&lt;code&gt;3.50GHz&lt;/code&gt;为&lt;code&gt;CPU高功耗&lt;/code&gt;睿频。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结果分析&#34;&gt;结果分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;睿频与功耗&lt;/code&gt;。睿频通常可高于主频 10%-50%，睿频由 CPU 调度，其功耗也会大幅增加，对笔记本电脑而言，接通电源与否对 CPU 性能影响极大。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;多核&lt;/code&gt;。受限于竞争资源，大部分中小型软件利用率较低。
&lt;img src=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E5%A4%9A%E6%A0%B8.jpg&#34;
	width=&#34;500&#34;
	height=&#34;426&#34;
	srcset=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E5%A4%9A%E6%A0%B8_hu7d2b05fb3f9541607ca1b8c5d61b7114_64853_480x0_resize_q75_box.jpg 480w, https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E5%A4%9A%E6%A0%B8_hu7d2b05fb3f9541607ca1b8c5d61b7114_64853_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;281px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;超线程&lt;/code&gt;。一般情况下高于单核，由于超线程管理的额外开销，特殊情况反而弱于单核单线程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;缓存&lt;/code&gt;。每级缓存命中率约在 80%，可软件层面优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;存储-硬盘&#34;&gt;存储-硬盘&lt;/h2&gt;
&lt;h3 id=&#34;理论分析-1&#34;&gt;理论分析&lt;/h3&gt;
&lt;h4 id=&#34;评价指标&#34;&gt;评价指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;读/写速度&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;容量&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;关键参数-1&#34;&gt;关键参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;连续读/写速度&lt;/code&gt;。在磁盘一段连续空间上读写文件的速度，应用场景为传输、备份文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4K 读/写速度&lt;/code&gt;。随机读取不连续 4K 大小的速度，应用场景为软件、游戏运行时加载资源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;接口类型&lt;/code&gt;，常见的家用接口有 SATA、M.2，服务器的 SAS。总线速度上限，如下
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SATA2.0&lt;/th&gt;
&lt;th&gt;SATA3.0&lt;/th&gt;
&lt;th&gt;PCI-E 3.0&lt;/th&gt;
&lt;th&gt;PCI-E 4.0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;250MB/s&lt;/td&gt;
&lt;td&gt;600MB/s&lt;/td&gt;
&lt;td&gt;1000MB/s x 带宽&lt;/td&gt;
&lt;td&gt;2000MB/s x 带宽&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;硬盘信息&#34;&gt;硬盘信息&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF.png&#34;
	width=&#34;842&#34;
	height=&#34;864&#34;
	srcset=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF_hu2114044a7cd1ab74bab4c6badba0f506_79221_480x0_resize_box_3.png 480w, https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF_hu2114044a7cd1ab74bab4c6badba0f506_79221_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;97&#34;
		data-flex-basis=&#34;233px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;测试实践-1&#34;&gt;测试实践&lt;/h3&gt;
&lt;h4 id=&#34;测试工具-1&#34;&gt;测试工具&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AS SSD 2.0.7316&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HD-Tune Pro 5.75&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Crystal Disk Info 8.15.2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;测试过程-1&#34;&gt;测试过程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;读/写&lt;/code&gt;测试
&lt;img src=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E8%AF%BB%E5%86%99%E6%B5%8B%E8%AF%95.png&#34;
	width=&#34;621&#34;
	height=&#34;581&#34;
	srcset=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E8%AF%BB%E5%86%99%E6%B5%8B%E8%AF%95_hu0cecf8d7788591dd7f24a89579beb22f_108371_480x0_resize_box_3.png 480w, https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E8%AF%BB%E5%86%99%E6%B5%8B%E8%AF%95_hu0cecf8d7788591dd7f24a89579beb22f_108371_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;106&#34;
		data-flex-basis=&#34;256px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结果分析-1&#34;&gt;结果分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;顺序读/写&lt;/code&gt;，读速高达 1991.93MB/s，是机械硬盘理论上限的 3 倍以上。
&lt;img src=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E9%A1%BA%E5%BA%8F%E8%AF%BB%E5%86%99.png&#34;
	width=&#34;604&#34;
	height=&#34;61&#34;
	srcset=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E9%A1%BA%E5%BA%8F%E8%AF%BB%E5%86%99_hubc698b65975f38ff1b89af76bd0f2b0f_17568_480x0_resize_box_3.png 480w, https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/%E9%A1%BA%E5%BA%8F%E8%AF%BB%E5%86%99_hubc698b65975f38ff1b89af76bd0f2b0f_17568_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;990&#34;
		data-flex-basis=&#34;2376px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4K读/写&lt;/code&gt;，读速 38.90MB/s，写速 90.11MB/s。通常机械硬盘的 4K 读写速度只有个位数，某宝的机械硬盘绝大部分没有此项数据。
&lt;img src=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/4Krw.png&#34;
	width=&#34;599&#34;
	height=&#34;43&#34;
	srcset=&#34;https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/4Krw_hua085afec51852132bffcecb536fcabf8_12955_480x0_resize_box_3.png 480w, https://bruce2233.github.io/p/%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E6%80%A7%E8%83%BD%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E6%B5%8B%E8%AF%95/4Krw_hua085afec51852132bffcecb536fcabf8_12955_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1393&#34;
		data-flex-basis=&#34;3343px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验心得&#34;&gt;实验心得&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;明确需求&lt;/code&gt;是第一要务。在计算资源丰富的今天，明确自身应用场景，才能不被淹没在各种指标信息的汪洋大海之中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;应用场景&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;游戏&lt;/code&gt;，选购建议&lt;code&gt;单核高频&lt;/code&gt;，&lt;code&gt;固态硬盘&lt;/code&gt;。大部分游戏对多核的优化较差（开发成本高），计算任务集中在单个 CPU 上。游戏在启动和运行时，需要从硬盘读取大量的美术资源和多组小文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;文件备份,影音娱乐&lt;/code&gt;，选购建议&lt;code&gt;CPU随意&lt;/code&gt;，&lt;code&gt;小容量固态+大容量机械&lt;/code&gt;。机械硬盘单位容量价格更低，且保存时间相对于固态更长。固态硬盘在长时间（4~5 年）不通电的情况下，内存电子约束减弱，可能会造成部分文件损坏。如有移动传输需求，机械硬盘在较低高度&lt;code&gt;坠落&lt;/code&gt;极有可能造成硬盘损坏，固态硬盘由于内部结构不存在机械结构，抗摔能力更强。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;专业软件&lt;/code&gt;，选购建议&lt;code&gt;多核低频&lt;/code&gt;，&lt;code&gt;固态硬盘&lt;/code&gt;，专业软件多核优化较好，计算能力一定条件下，增加并行核数比提高主频成本更低。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>单元测试神器之go test</title>
        <link>https://bruce2233.github.io/p/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8%E4%B9%8Bgo-test/</link>
        <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://bruce2233.github.io/p/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8%E4%B9%8Bgo-test/</guid>
        <description>&lt;img src="https://bruce2233.github.io/p/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8%E4%B9%8Bgo-test/goimg.jpg" alt="Featured image of post 单元测试神器之go test" /&gt;&lt;p&gt;​                                                            &lt;a class=&#34;link&#34; href=&#34;https://studygolang.com/pkgdoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://img.shields.io/badge/testing-api-brightgreen?style=flat&amp;amp;logo=go&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;go-test&#34;
	
	
&gt;&lt;/a&gt;                &lt;a class=&#34;link&#34; href=&#34;https://github.com/golang/go/tree/master/src/testing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://img.shields.io/badge/go-testing-brightgreen?style=flat&amp;amp;logo=github&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;go-test&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go test&lt;/code&gt; 是 Go 标准库中的&lt;code&gt;单元测试&lt;/code&gt;与性能测试系统,也是 go 的&lt;code&gt;子命令&lt;/code&gt;之一&lt;/p&gt;
&lt;h2 id=&#34;go-test-命令及常用参数&#34;&gt;go test 命令及常用参数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;go test [文件名] [-run 函数名]&lt;/code&gt;执行工作目录下&lt;code&gt;[文件名]&lt;/code&gt;内&lt;code&gt;函数名&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试文件名&lt;strong&gt;必须&lt;/strong&gt; 以&lt;code&gt;_test.go&lt;/code&gt;结尾&lt;/li&gt;
&lt;li&gt;测试函数名&lt;strong&gt;必须&lt;/strong&gt;以&lt;code&gt;Test&lt;/code&gt;开头&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 参数类型必须为 &lt;code&gt;*tesing.T&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若测试代码引用包内其他&lt;code&gt;.go&lt;/code&gt;文件，&lt;strong&gt;必须&lt;/strong&gt; 在命令中添加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[文件名] == nil&lt;/code&gt; &lt;img src=&#34;https://latex.codecogs.com/svg.image?%5cinline&amp;amp;space;%5clarge&amp;amp;space;%5cLeftrightarrow&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;工作目录下所有文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-run 函数名 == nil&lt;/code&gt; &lt;img src=&#34;https://latex.codecogs.com/svg.image?%5cinline&amp;amp;space;%5clarge&amp;amp;space;%5cLeftrightarrow&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;工作目录下所有文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; 输出详细测试信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-bench&lt;/code&gt;基准测试参数，待更新&amp;hellip;&amp;hellip;!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
